<?xml version="1.0"?>

<project xmlns:ivy="antlib:org.apache.ivy.ant" name="tries" default="dist" basedir=".">

  <property name="project.name" value="tries" />
  <property name="project.version" value="0.1" />
  <property name="src.dir" value="src/java" />
  <property name="test.src.dir" value="src/test" />
  <property name="build.dir" value="build" />
  <property name="dist.dir" value="dist" />
  <property name="build.classes" value="${build.dir}/classes" />
  <property name="test.build.classes" value="${build.dir}/test-classes" />
  <property name="dist.jar" value="${dist.dir}/${project.name}-${project.version}.jar"/>
  <property name="lib.dir" value="lib" />
  <property name="test.reports.dir" value="${build.dir}/test-reports" />
  <property name="javac.target" value="5" />
  <property name="javac.source" value="5" />

  <target name="init">
    <mkdir dir="${build.dir}" />
    <ivy:retrieve />
  </target>

  <target name="compile" depends="init">
    <mkdir dir="${build.classes}" />
    <javac srcdir="${src.dir}"
        destdir="${build.classes}"
        target="${javac.target}"
        source="${javac.source}">
      <classpath>
        <fileset dir="${lib.dir}" includes="*.jar"/>
      </classpath>
    </javac>
  </target>

  <target name="compile-tests" depends="compile">
   <mkdir dir="${test.build.classes}" />
    <javac srcdir="${test.src.dir}"
        destdir="${test.build.classes}"
        target="${javac.target}"
        source="${javac.source}">
      <classpath>
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <pathelement location="${build.classes}" />
      </classpath>
    </javac>    
  </target>

  <target name="test" depends="compile-tests">
    <mkdir dir="${test.reports.dir}" />
    <junit printsummary="yes" haltonfailure="no">
      <classpath>
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <pathelement location="${build.classes}" />
        <pathelement location="${test.build.classes}"/>
      </classpath>
      <batchtest fork="yes" todir="${test.reports.dir}">
        <fileset dir="${test.src.dir}">
          <include name="**/*Test.java" />
          <exclude name="**/Abstract*.java" />
        </fileset>
      </batchtest>

    </junit>
  </target>

  <target name="test_perf" depends="compile-tests">
    <input message="File containing the words to read:" addproperty="writes" />
    <input message="File containing the words to read:" addproperty="reads" />
    <java classname="net.jpountz.charsequence.collect.ReadPerfBenchmark" fork="true">
      <jvmarg value="-Xms250m" />
      <jvmarg value="-Xmx250m" />
      <jvmarg value="-server" />
      <jvmarg value="-XX:+AggressiveOpts" />
      <jvmarg value="-XX:+UseFastAccessorMethods" />
      <jvmarg value="-XX:CompileThreshold=1" />
      <arg value="${writes}" />
      <arg value="${reads}" />
      <classpath>
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <pathelement location="${build.classes}" />
        <pathelement location="${test.build.classes}"/>
      </classpath>
    </java> 
  </target>

  <target name="test_mem" depends="compile-tests">
    <input message="Words to insert:" addproperty="writes" />
    <java classname="net.jpountz.charsequence.collect.MemoryBenchmark" fork="true">
      <jvmarg value="-Xms250m" />
      <jvmarg value="-Xmx250m" />
      <jvmarg value="-XX:+UseCompressedStrings" />
      <jvmarg value="-server" />
      <arg value="${writes}" />
      <classpath>
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <pathelement location="${build.classes}" />
        <pathelement location="${test.build.classes}"/>
      </classpath>
    </java>
  </target>

  <target name="dist" depends="compile">
   <mkdir dir="${dist.dir}" />
    <jar destfile="${dist.jar}"
        basedir="${build.classes}" />
  </target>

  <target name="clean">
    <delete dir="${build.dir}" />
    <delete dir="${dist.dir}" />
    <delete dir="${lib.dir}" />
  </target>

</project>
